// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XFCUDA_H
#define XFCUDA_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xfcuda_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axi4lites_BaseAddress;
} XFcuda_Config;
#endif

typedef struct {
    u32 Axi4lites_BaseAddress;
    u32 IsReady;
} XFcuda;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XFcuda_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XFcuda_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XFcuda_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XFcuda_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XFcuda_Initialize(XFcuda *InstancePtr, u16 DeviceId);
XFcuda_Config* XFcuda_LookupConfig(u16 DeviceId);
int XFcuda_CfgInitialize(XFcuda *InstancePtr, XFcuda_Config *ConfigPtr);
#else
int XFcuda_Initialize(XFcuda *InstancePtr, const char* InstanceName);
int XFcuda_Release(XFcuda *InstancePtr);
#endif

void XFcuda_Start(XFcuda *InstancePtr);
u32 XFcuda_IsDone(XFcuda *InstancePtr);
u32 XFcuda_IsIdle(XFcuda *InstancePtr);
u32 XFcuda_IsReady(XFcuda *InstancePtr);
void XFcuda_EnableAutoRestart(XFcuda *InstancePtr);
void XFcuda_DisableAutoRestart(XFcuda *InstancePtr);

void XFcuda_SetE_c_addr(XFcuda *InstancePtr, u32 Data);
u32 XFcuda_GetE_c_addr(XFcuda *InstancePtr);
void XFcuda_SetW_c_addr(XFcuda *InstancePtr, u32 Data);
u32 XFcuda_GetW_c_addr(XFcuda *InstancePtr);
void XFcuda_SetN_c_addr(XFcuda *InstancePtr, u32 Data);
u32 XFcuda_GetN_c_addr(XFcuda *InstancePtr);
void XFcuda_SetS_c_addr(XFcuda *InstancePtr, u32 Data);
u32 XFcuda_GetS_c_addr(XFcuda *InstancePtr);
void XFcuda_SetJ_cuda_addr(XFcuda *InstancePtr, u32 Data);
u32 XFcuda_GetJ_cuda_addr(XFcuda *InstancePtr);
void XFcuda_SetC_cuda_addr(XFcuda *InstancePtr, u32 Data);
u32 XFcuda_GetC_cuda_addr(XFcuda *InstancePtr);
void XFcuda_SetCols(XFcuda *InstancePtr, u32 Data);
u32 XFcuda_GetCols(XFcuda *InstancePtr);
void XFcuda_SetQ0sqr(XFcuda *InstancePtr, double Data);
double XFcuda_GetQ0sqr(XFcuda *InstancePtr);
void XFcuda_SetGriddim_x(XFcuda *InstancePtr, u32 Data);
u32 XFcuda_GetGriddim_x(XFcuda *InstancePtr);
void XFcuda_SetGriddim_y(XFcuda *InstancePtr, u32 Data);
u32 XFcuda_GetGriddim_y(XFcuda *InstancePtr);
void XFcuda_SetBlockdim_x(XFcuda *InstancePtr, u32 Data);
u32 XFcuda_GetBlockdim_x(XFcuda *InstancePtr);
void XFcuda_SetBlockdim_y(XFcuda *InstancePtr, u32 Data);
u32 XFcuda_GetBlockdim_y(XFcuda *InstancePtr);
void XFcuda_SetEn_fcuda1(XFcuda *InstancePtr, u32 Data);
u32 XFcuda_GetEn_fcuda1(XFcuda *InstancePtr);
void XFcuda_SetLambda(XFcuda *InstancePtr, double Data);
double XFcuda_GetLambda(XFcuda *InstancePtr);
void XFcuda_SetEn_fcuda2(XFcuda *InstancePtr, u32 Data);
u32 XFcuda_GetEn_fcuda2(XFcuda *InstancePtr);

void XFcuda_InterruptGlobalEnable(XFcuda *InstancePtr);
void XFcuda_InterruptGlobalDisable(XFcuda *InstancePtr);
void XFcuda_InterruptEnable(XFcuda *InstancePtr, u32 Mask);
void XFcuda_InterruptDisable(XFcuda *InstancePtr, u32 Mask);
void XFcuda_InterruptClear(XFcuda *InstancePtr, u32 Mask);
u32 XFcuda_InterruptGetEnabled(XFcuda *InstancePtr);
u32 XFcuda_InterruptGetStatus(XFcuda *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
